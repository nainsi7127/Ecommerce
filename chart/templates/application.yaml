apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  labels:
    app.kubernetes.io/name: {{ .Values.name }}
    app.kubernetes.io/version: "{{ .Values.image.tag }}"
    app.kubernetes.io/part-of: {{ .Values.global.platform }}
    app.kubernetes.io/managed-by: helm
  annotations:
    configmap.reloader.stakater.com/reload: "{{ .Values.name }}-properties,{{ .Values.name }}-env"
    secret.reloader.stakater.com/reload: {{ .Values.name }}-secrets
spec:
  replicas: {{ .Values.global.configuration.sc_compliance_ops_ms.number_of_replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.name }}
        app.kubernetes.io/part-of: {{ .Values.global.platform }}
    spec:
      {{- if $.Values.global.nodeSelector }}
      nodeSelector: {{- $.Values.global.nodeSelector | toYaml | nindent 8 }}
      {{- end }}
      {{- if $.Values.global.tolerations }}
      tolerations: {{- $.Values.global.tolerations | toYaml | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.global.ServiceAccount }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - {{ .Values.name }}
      containers:
      - name: {{ .Values.name }}
        image: sitaonair.azurecr.io/{{ .Values.name }}:{{ .Values.image.tag }}
        {{- if .Values.global.configuration.sc_compliance_ops_ms.quotas }}
        {{- with .Values.global.configuration.sc_compliance_ops_ms.quotas }}
        resources:
          requests:
            memory: {{ .mem_request | quote }}
            cpu: {{ .cpu_request | quote }}
          limits:
            memory: {{ .mem_limit | quote }}
            cpu: {{ .cpu_limit | quote }}
        {{- end }}
        {{- end }}
        ports:
        - containerPort: 8084
        - containerPort: 9999
#        readinessProbe:
#          httpGet:
#            scheme: HTTP
#            path: management/health
#            port: 9999
#          initialDelaySeconds: 60
#          periodSeconds: 10
#          timeoutSeconds: 10
#          successThreshold: 1
#          failureThreshold: 10
#        livenessProbe:
#          httpGet:
#            scheme: HTTP
#            path: management/health
#            port: 9999
#          initialDelaySeconds: 240
#          periodSeconds: 20
#          timeoutSeconds: 10
#          successThreshold: 1
#          failureThreshold: 5
        volumeMounts:
        - name: {{ .Values.name }}-properties
          mountPath: /opt/config/
        env:
        - name: SPRING_CONFIG_LOCATION
          value: '/opt/config/'
        - name: NEW_RELIC_APP_NAME
          value: '{{ if .Values.global.newrelic.prefix }}{{ .Values.global.newrelic.prefix }}-{{ end }}{{ .Values.name }}-{{ .Values.global.newrelic.environment }}'
        - name: NEW_RELIC_PROCESS_HOST_DISPLAY_NAME
          value: '{{ .Values.global.host }}'
        - name: NEW_RELIC_LICENSE_KEY
          value: '{{ .Values.global.newrelic.license_key }}'
        - name: NEW_RELIC_AGENT_ENABLED
          {{- if .Values.global.configuration.sc_compliance_ops_ms.newrelic }}
          value: '{{ .Values.global.configuration.sc_compliance_ops_ms.newrelic.enabled }}'
          {{- else }}
          value: '{{ .Values.global.newrelic.enabled }}'
          {{- end }}
        - name: APPLICATION_VERSION
          value: "{{ .Values.image.tag }}"
        envFrom:
        - secretRef:
            name: {{ .Values.name }}-secrets
        - configMapRef:
            name: {{ .Values.name }}-env
      volumes:
      - name: {{ .Values.name }}-properties
        configMap:
          name: {{ .Values.name }}-properties

      {{- if $.Values.global.imageCredentials }}
      imagePullSecrets:
          - name: {{ $.Values.global.imageCredentials.secretName }}
      {{- end }}
---
kind: Service
apiVersion: v1
metadata:
  name: {{ .Values.name }}
  labels:
    app.kubernetes.io/name: {{ .Values.name }}
    app.kubernetes.io/version: "{{ .Values.image.tag }}"
    app.kubernetes.io/part-of: {{ .Values.global.platform }}
    app.kubernetes.io/managed-by: helm
spec:
  selector:
    app.kubernetes.io/name: {{ .Values.name }}
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8084
  - name: health
    protocol: TCP
    port: 9999
    targetPort: 9999
  type: ClusterIP